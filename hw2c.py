# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JKgfgnDfXIYrV1PDXPkj7PCxidKAFfgm
"""

#!pip install git+https://github.com/NicolasHug/Surprise.git

from dbm import dumb
from operator import itemgetter
from itertools import product
import re
import time 
import json
from surprise import SVD
from surprise import Reader
from surprise import Dataset
from surprise import accuracy
from surprise.model_selection import train_test_split
import pandas as pd

import sklearn.model_selection
t = time.time()

# filename = 'CDs_and_Vinyl_5.json'
# filename = "Electronics_5.json"
# filename = "Kindle_Store_5.json"
filename = "Digital_Music_5.json"

# filename = "_5.json"
print(filename)
with open(filename, 'r') as handle: #'/content/drive/MyDrive/NLP Project files/Digital_Music_5.json', 'r') as handle:
    json_data = [json.loads(line) for line in handle]
df = pd.DataFrame(json_data, columns=["reviewerID", "asin", "overall"])
print(df[0:30])
data = df[["reviewerID", "asin", "overall"]]
data.columns = [["reviewerID", "asin", "raw_ratings"]]
#print(data[1:10])
reader = Reader()
data = Dataset.load_from_df(data, reader=reader)

trainset, testset = train_test_split(data, test_size=.25)
algo = SVD()
algo.fit(trainset)
predictions = algo.test(testset)
accuracy.rmse(predictions)
accuracy.mse(predictions)

#print(predictions)
elapsed = time.time() - t
print(elapsed)

print("prediction\n" , predictions[0:1])#[0:20])

#print(len(df), (len(df)/4))

user_dict = {}

for i in predictions:
    if i.uid not in user_dict:
        user_dict[i.uid] = [[i.est, i.iid, i.r_ui]]
    else:
        user_dict[i.uid].append([i.est, i.iid, i.r_ui])

for user in user_dict:
    user_dict[user] = sorted(user_dict[user], key=itemgetter(0), reverse = True)
    #userdict
# for i in predictions:
dumb_counter = 100
for i, user in enumerate(user_dict):
    dumb_counter +=1
    if dumb_counter > 10:
        break
    print(user, user_dict[user])
# print(len(uids))

recommendations = user_dict.copy()

for i in recommendations:
    if len(recommendations[i]) > 10:
        #print("shortened")
        recommendations[i] = recommendations[i][:10]
    #print(len(recommendations[i]))

total_recommended = 0
relevant_recommendations = 0
true_positive = 0
for i in recommendations:
    for j in range(len(recommendations[i])):
        total_recommended +=1
        if recommendations[i][j][2] > 3.5:
            #print(recommendations[i][j][2])
            relevant_recommendations+=1
            if recommendations[i][j][0] > 3.5:
                true_positive += 1

precision = relevant_recommendations/total_recommended

relevant_items = 0
for i in user_dict:
    for j in range(len(user_dict[i])):
        if user_dict[i][j][2] > 3.5:
            relevant_items += 1
recall = relevant_recommendations/relevant_items
f1_score = (2*precision*recall)/(precision+recall)

print(precision, recall, f1_score)

# print(json_data[0:1])